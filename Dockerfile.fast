# =============================================================================
# FAST BUILD - Using pre-built local wheels (no compilation needed)
# =============================================================================
FROM pytorch/pytorch:2.5.1-cuda12.1-cudnn9-devel AS builder

# Layer 1: Essential build tools (PyTorch already included in base)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake ninja-build pkg-config gcc g++ \
    git wget curl unzip ca-certificates \
    libgl1-mesa-dev libglu1-mesa-dev libegl1-mesa-dev \
    libglib2.0-0 libsm6 libxrender1 libxext6 libfreetype6-dev \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Layer 2: Environment and UV installer
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TORCH_CUDA_ARCH_LIST="8.0;8.6;8.9;9.0" \
    FORCE_CUDA=1

COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/
WORKDIR /app

# Layer 3: Use system Python (matches PyTorch base)
ENV PYTHONPATH="/opt/conda/lib/python3.11/site-packages:/app"

# Layer 4: Core ML dependencies (stable layer)
RUN uv pip install --system \
    transformers==4.46.0 diffusers==0.30.0 accelerate==1.1.1 \
    huggingface-hub==0.30.2 safetensors==0.4.4 einops==0.8.0

# Layer 5: Build tools and computation libraries (stable)
RUN uv pip install --system \
    wheel setuptools pybind11[global] ninja packaging cmake \
    numpy==1.24.4 scipy==1.14.1

# Layer 6: Computer vision and mesh processing (stable)
RUN uv pip install --system \
    opencv-python==4.10.0.84 imageio==2.36.0 scikit-image==0.24.0 \
    trimesh==4.4.7 pygltflib==1.16.3

# Layer 7: Specialized ML packages (medium stability)
RUN uv pip install --system \
    rembg==2.0.65 onnxruntime==1.16.3 xatlas==0.0.9 bpy==4.0

# Layer 8: Configuration and utility packages (stable)
RUN uv pip install --system \
    omegaconf==2.3.0 pyyaml==6.0.2 tqdm==4.66.5 psutil==6.0.0

# Layer 9: API and cloud packages (stable)
RUN uv pip install --system \
    fastapi==0.115.12 uvicorn==0.34.3 pydantic==2.10.6 \
    boto3 runpod requests Pillow hf_xet

# Layer 10: Optional packages (separate layer for failure tolerance)
RUN uv pip install --system pymeshlab==2022.2.post3 realesrgan==0.3.0 \
    basicsr==1.4.2 open3d==0.18.0 torchmetrics==1.6.0 timm torchdiffeq \
    || echo "Some optional packages failed"

# Layer 11: Application source code (changes most frequently)
COPY hy3dshape/ ./hy3dshape/
COPY hy3dpaint/ ./hy3dpaint/
COPY api_server.py model_worker.py textureGenPipeline.py torchvision_fix.py ./
COPY api_models.py constants.py logger_utils.py ./

# Layer 12: Download RealESRGAN checkpoint
RUN mkdir -p /app/ckpt && \
    wget -O /app/ckpt/RealESRGAN_x4plus.pth \
    https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth

# Layer 13: Compile custom rasterizer CUDA extension (like original)
WORKDIR /app/hy3dpaint/custom_rasterizer
RUN pip install -e .

# Layer 14: Compile mesh inpaint processor C++ extension (like original)
WORKDIR /app/hy3dpaint/DifferentiableRenderer
RUN chmod +x compile_mesh_painter.sh && ./compile_mesh_painter.sh

# Back to main workdir
WORKDIR /app

# Layer 15: Install pre-built local wheels (SUPER FAST - no compilation!)
COPY wheels/ ./wheels/
RUN if [ -f ./wheels/*.whl ]; then \
        uv pip install --system ./wheels/*.whl --no-deps --force-reinstall && \
        echo "Installed pre-built wheels: $(ls ./wheels/)" ; \
    else \
        echo "Warning: No wheels found in ./wheels/" ; \
    fi

# =============================================================================
# RUNTIME STAGE - Optimized for fast extraction on Runpod
# =============================================================================
FROM pytorch/pytorch:2.5.1-cuda12.1-cudnn9-devel AS runtime

# Runtime Layer 1: Install runtime libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1 libglu1-mesa libegl1 ca-certificates \
    libglib2.0-0 libsm6 libxrender1 libxext6 libfreetype6 \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Runtime Layer 2: Environment (tiny layer)  
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/opt/conda/lib/python3.11/site-packages:/app" \
    PYOPENGL_PLATFORM=egl \
    CUDA_VISIBLE_DEVICES=0

WORKDIR /app

# Runtime Layer 3: Copy Python packages from builder (critical!)
COPY --from=builder /opt/conda/lib/python3.11/site-packages /opt/conda/lib/python3.11/site-packages

# Runtime Layer 4: Core modules with compiled extensions (medium size, stable)
COPY --from=builder /app/hy3dshape /app/hy3dshape
COPY --from=builder /app/hy3dpaint /app/hy3dpaint
COPY --from=builder /app/ckpt /app/ckpt

# Runtime Layer 5: Application files (small, changes most frequently)
COPY --from=builder /app/api_server.py /app/model_worker.py /app/textureGenPipeline.py /app/
COPY --from=builder /app/torchvision_fix.py /app/api_models.py /app/constants.py /app/logger_utils.py /app/

# Runtime Layer 6: Runtime setup (tiny layer)
RUN mkdir -p /tmp /app/weights && chmod 777 /tmp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=2 \
    CMD python -c "import torch; assert torch.cuda.is_available()" || exit 1

EXPOSE 8080
CMD ["python", "api_server.py"]
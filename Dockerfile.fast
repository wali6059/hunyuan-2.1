# =============================================================================
# FIXED BUILD - Using CUDA 12.4.1 with Python 3.10 (matching original repo)
# =============================================================================
FROM nvidia/cuda:12.4.1-devel-ubuntu22.04 AS builder

# Layer 1: Essential build tools and Python 3.10 (like original)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake ninja-build pkg-config gcc g++ \
    git wget curl unzip ca-certificates \
    libgl1-mesa-dev libglu1-mesa-dev libegl1-mesa-dev \
    libglib2.0-0 libsm6 libxrender1 libxext6 libfreetype6-dev \
    python3.10 python3.10-venv python3.10-dev python3-pip \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Layer 2: Environment (matching original)
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH \
    PYOPENGL_PLATFORM=egl \
    CUDA_HOME=/usr/local/cuda \
    PATH=${CUDA_HOME}/bin:${PATH} \
    LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH} \
    TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0"

# Layer 3: Create Python 3.10 virtual environment (like original)
RUN python3.10 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set workspace directory (like original)
WORKDIR /workspace

# Layer 4: Install PyTorch with CUDA 12.4 support (like original)
RUN pip install torch==2.5.1 torchvision==0.20.1 torchaudio==2.5.1 --index-url https://download.pytorch.org/whl/cu124

# Layer 5: Core ML dependencies (matching requirements.txt exactly)
RUN pip install \
    transformers==4.46.0 diffusers==0.30.0 accelerate==1.1.1 \
    huggingface-hub==0.30.2 safetensors==0.4.4 einops==0.8.0

# Layer 6: Build tools and computation libraries (matching original)
RUN pip install \
    ninja==1.11.1.1 pybind11==2.13.4 \
    numpy==1.24.4 scipy==1.14.1

# Layer 7: Computer vision and image processing (matching original)
RUN pip install \
    opencv-python==4.10.0.84 imageio==2.36.0 scikit-image==0.24.0 \
    rembg==2.0.65 realesrgan==0.3.0 basicsr==1.4.2

# Layer 8: 3D mesh processing (matching original)
RUN pip install \
    trimesh==4.4.7 pygltflib==1.16.3 pymeshlab==2022.2.post3 \
    xatlas==0.0.9 open3d==0.18.0

# Layer 9: Configuration and utilities (matching original)
RUN pip install \
    omegaconf==2.3.0 pyyaml==6.0.2 tqdm==4.66.5 psutil==6.0.0 \
    configargparse==1.7

# Layer 10: ONNX and ML packages (matching original exactly)
RUN pip install \
    onnxruntime==1.16.3 torchmetrics==1.6.0

# Layer 10b: Install bpy==4.0 for Python 3.10 with Blender PyPI index
RUN pip install bpy==4.0.0 --extra-index-url https://download.blender.org/pypi/

# Layer 11: API and cloud packages (for deployment)
RUN pip install \
    fastapi==0.115.12 uvicorn==0.34.3 pydantic==2.10.6 \
    boto3 runpod requests Pillow

# Layer 12: Additional packages (from original requirements.txt)
RUN pip install timm torchdiffeq cupy-cuda12x==13.4.1 || echo "Some optional packages failed"

# Layer 13: Copy application source code (like original structure)
COPY hy3dshape/ ./hy3dshape/
COPY hy3dpaint/ ./hy3dpaint/
COPY api_server.py model_worker.py textureGenPipeline.py torchvision_fix.py ./
COPY api_models.py constants.py logger_utils.py ./

# Layer 14: Download RealESRGAN to correct path (like original)
RUN cd hy3dpaint && mkdir -p ckpt && \
    wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -P ckpt

# Layer 15: Compile custom rasterizer CUDA extension (like original)
WORKDIR /workspace/hy3dpaint/custom_rasterizer
RUN pip install -e .

# Layer 16: Compile mesh inpaint processor C++ extension (like original)
WORKDIR /workspace/hy3dpaint/DifferentiableRenderer
RUN chmod +x compile_mesh_painter.sh && ./compile_mesh_painter.sh

# Back to workspace root (like original)
WORKDIR /workspace

# Layer 17: Install pre-built local wheels if available
COPY wheels/ ./wheels/
RUN if [ -f ./wheels/*.whl ]; then \
        pip install ./wheels/*.whl --no-deps --force-reinstall && \
        echo "Installed pre-built wheels: $(ls ./wheels/)" ; \
    else \
        echo "Warning: No wheels found in ./wheels/" ; \
    fi

# =============================================================================
# RUNTIME STAGE - Single stage like original (no multi-stage complexity)
# =============================================================================
# Use the builder as final stage (like original Dockerfile)

# Final setup like original
ENV LD_LIBRARY_PATH="/opt/venv/lib:${LD_LIBRARY_PATH}"

# Create cache directories
RUN mkdir -p gradio_cache

# Set final working directory like original
WORKDIR /workspace

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=2 \
    CMD python -c "import torch; assert torch.cuda.is_available()" || exit 1

EXPOSE 8080
CMD ["python", "api_server.py"]